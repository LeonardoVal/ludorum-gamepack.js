//! ludorum-game-colograph 0.1.0

(function(a){"use strict";"function"==typeof define&&define.amd?define(["creatartis-base","sermat","ludorum"],a):"object"==typeof exports&&module.exports?module.exports=a(require("creatartis-base"),require("sermat"),require("ludorum")):this.Sermat=a(this.base,this.Sermat,this.ludorum)}).call(this,function a(b,c,d){"use strict";var e=b.declare,f=b.obj,g=b.copy,h=(b.raise,b.raiseIf),i=(b.Iterable,b.iterable),j=d.Game,k=d.players.UserInterface,l={__package__:"ludorum-game-colograph",__name__:"ludorum_game_colograph",__init__:a,__dependencies__:[b,c,d],__SERMAT__:{include:[b,d]}},m=l.Colograph=e(j,{name:"Colograph",constructor:function(a){j.call(this,a?a.activePlayer:void 0),b.initialize(this,a).object("colours",{defaultValue:{}}).array("edges",{defaultValue:[[1,3],[2],[3],[]]}).array("shapes",{defaultValue:["circle","triangle","square","star"]}).number("scoreSameShape",{defaultValue:-1,coerce:!0}).number("scoreDifferentShape",{defaultValue:-1,coerce:!0})},players:["Red","Blue"],score:function(){var a={},b=this.shapes,c=this.colours,d=this.scoreSameShape,e=this.scoreDifferentShape,f=this.edges.length;return this.players.forEach(function(b){a[b]=f}),i(this.edges).forEach(function(f,g){f.forEach(function(f){var h=g+","+f;c.hasOwnProperty(h)&&(a[c[h]]+=b[g]===b[f]?d:e)})}),a},result:function(){if(this.moves())return null;var a=this.score(),b=this.players;return this.zerosumResult(a[b[0]]-a[b[1]],b[0])},moves:function(){for(var a=(this.colours,[]),b=0;b<this.edges.length;b++)this.colours.hasOwnProperty(b)||a.push(b);return a.length<1?null:f(this.activePlayer(),a)},next:function(a,b,c){h(b,"Haps are not required (given ",b,")!");var d=this.activePlayer(),e=+a[d]>>0;h(e<0||e>=this.colours.length,"Invalid move: node ",e," does not exist in ",this,"."),h(this.colours[e]>=0,"Invalid move: node ",e," has already been coloured in ",this,".");var i=g(f(e,d),this.colours);this.edges[e].forEach(function(a){i[a]===d&&(i[e+","+a]=d)}),this.edges.forEach(function(a,b){b!==e&&a.indexOf(e)>=0&&i[b]===d&&(i[b+","+e]=d)});var j={activePlayer:this.opponent(d),colours:i,edges:this.edges,shapes:this.shapes,scoreSameShape:this.scoreSameShape,scoreDifferentShape:this.scoreDifferentShape};return c?(this.constructor(j),this):new this.constructor(j)},"static __SERMAT__":{identifier:"Colograph",serializer:function(a){return[{activePlayer:a.activePlayer(),colours:a.colours,edges:a.edges,shapes:a.shapes,scoreSameShape:a.scoreSameShape,scoreDifferentShape:a.scoreDifferentShape}]}},edgeColour:function(a,b){var c=this.edges[a].indexOf(b)>=0||this.edges[b].indexOf(a)>=0,d=this.colours[a],e=this.colours[b];return c&&d>=0&&d===e?d:-1},"static heuristics":{scoreDifference:function(a,b){var c=a.score(),d=0;for(var e in c)d+=e===b?c[e]:-c[e];return d/a.edges.length/2}},"static randomGraph":function(a,b,c){a=Math.max(2,+a>>0),b=Math.max(a-1,+b>>0);for(var d,e,f=basis.iterables.range(a-1).map(function(b){return c.split(1,basis.iterables.range(b+1,a).toArray())}).toArray(),g=b-(a-1);g>0;g--)d=c.choice(f),d[1].length>0&&(e=c.split(1,d[1]),d[0].push(e[0][0]),d[1]=e[1],g--);return f=f.map(function(a){return a[0]}),f.push([]),f},"static randomGame":function(a){params=b.initialize({},params).object("random",{defaultValue:randomness.DEFAULT}).integer("nodeCount",{defaultValue:8,coerce:!0}).integer("edgeCount",{defaultValue:11,coerce:!0}).integer("shapeCount",{defaultValue:4,coerce:!0,minimum:1,maximum:4}).subject;var c=["circle","triangle","square","star"];return new m({edges:this.randomGraph(params.nodeCount,params.edgeCount,params.random),shapes:params.random.randoms(params.nodeCount,0,params.shapeCount).map(function(a){return c[0|a]}),scoreSameShape:1})},"static KineticUI":e(k,{constructor:function(a){k.call(this,a),initialize(this,a).string("container",{defaultValue:"colograph-container"}).object("Kinetic",{defaultValue:window.Kinetic}).integer("canvasRadius",{defaultValue:NaN,coerce:!0}).integer("nodeRadius",{defaultValue:15,coerce:!0}).array("playerColours",{defaultValue:["red","blue"]}),isNaN(this.canvasRadius)&&(this.canvasRadius=.6*Math.min(screen.width,screen.height)>>1);var b=this.stage=new Kinetic.Stage({container:this.container,width:2*this.canvasRadius,height:2*this.canvasRadius}),c=this.layer=new Kinetic.Layer({clearBeforeDraw:!0,offsetX:-this.canvasRadius,offsetY:-this.canvasRadius}),d=this.match.state();b.add(c),setInterval(b.draw.bind(b),1e3/30),c.destroyChildren(),this.edges={},this.nodes={},this.drawEdges(d),this.drawNodes(d)},drawEdges:function(a){var b=2*Math.PI/a.edges.length,c=this.canvasRadius-2*this.nodeRadius,d=this;a.edges.forEach(function(a,e){a.forEach(function(a){var f=new d.Kinetic.Line({points:[c*Math.cos(b*e),c*Math.sin(b*e),c*Math.cos(b*a),c*Math.sin(b*a)],stroke:"black",strokeWidth:2});d.edges[e+","+a]=f,d.layer.add(f)})})},drawNodes:function(a){var b=2*Math.PI/a.edges.length,c=this.canvasRadius-2*this.nodeRadius,d=this;a.edges.forEach(function(e,f){var g,h=c*Math.cos(b*f),i=c*Math.sin(b*f);switch(a.shapes[f]){case"square":g=d.drawSquare(h,i,d.nodeRadius,f);break;case"triangle":g=d.drawTriangle(h,i,d.nodeRadius,f);break;case"star":g=d.drawStar(h,i,d.nodeRadius,f);break;default:g=d.drawCircle(h,i,d.nodeRadius,f)}g.on("mouseover",function(){g.setScale(1.2)}),g.on("mouseout",function(){g.setScale(1)}),g.on("click tap",function(){d.perform(f)}),g.setRotation(2*Math.random()*Math.PI),d.nodes[f]=g,d.layer.add(g)})},drawCircle:function(a,b,c,d){return new this.Kinetic.Circle({x:a,y:b,radius:c,fill:"white",stroke:"black",strokeWidth:2})},drawSquare:function(a,b,c,d){return new this.Kinetic.Rect({x:a,y:b,width:2*c,height:2*c,offsetX:c,offsetY:c,fill:"white",stroke:"black",strokeWidth:2})},drawStar:function(a,b,c,d){return new Kinetic.Star({numPoints:5,x:a,y:b,innerRadius:.6*c,outerRadius:1.5*c,fill:"white",stroke:"black",strokeWidth:2})},drawTriangle:function(a,b,c,d){return new Kinetic.RegularPolygon({sides:3,x:a,y:b,radius:1.25*c,fill:"white",stroke:"black",strokeWidth:2})},display:function(a){this.updateEdges(a),this.updateNodes(a)},updateEdges:function(a){var b=this;a.edges.forEach(function(c,d){c.forEach(function(c){var e=d+","+c;b.edges[e].setStroke(a.colours[e]||"black")})})},updateNodes:function(a){var b=this;a.edges.forEach(function(c,d){var e=a.colours[d];e&&(b.nodes[d].setFill(e),b.nodes[d].off("mouseover mouseout click tap"))})}})});return d.games.Colograph=m,m.__SERMAT__.identifier=l.__package__+"."+m.__SERMAT__.identifier,l.__SERMAT__.include.push(m),c.include(l),l});
//# sourceMappingURL=ludorum-game-colograph.min.js.map